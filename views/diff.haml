%script{:type=>"text/javascript", :src=>"/experiments/canvas-text/render.js"}
%script{:type=>"text/javascript", :src=>"/barrier.js"}
:javascript
  var b = new Barrier(doDiffs);

  // takes a image tag and returns a canvas, properly sized, with the image
  // inside it
  function imgToCanvas(img) {
    var c = document.createElement("canvas");
    c.width = img.width;
    c.height = img.height;
    var ctx = c.getContext('2d');
    ctx.drawImage(img, 0, 0);
    var imageData = ctx.getImageData(0,0, c.width, c.height);
    return {"canvas": c, "context": ctx, "imageData": imageData};
  }

  // too specialized. Shouldn't take obj here.
  function makeImageCallback(obj, barrier, tag) {
    return function() {
      obj.canvas = imgToCanvas(obj.image);
      barrier.notify(tag);
    };
  };

  var prime = #{ @result.to_json };
  prime.image = new Image();
  prime.image.src = prime["png"];
  prime.image.tag = b.register();
  prime.image.onload = makeImageCallback(prime, b, prime.image.tag);

  var multipixels = [
    #{
      @results.map {|result|
        result.to_json
      }.join(',\n')
    }
  ];
  for(var i = 0; i < multipixels.length; i++) {
    // If there's no png, don't parse it
    if(multipixels[i]["png"] == null) {
      continue;
    }

    multipixels[i].image = new Image();
    multipixels[i].image.src = multipixels[i]["png"];
    multipixels[i].image.tag = b.register();
    multipixels[i].image.onload = makeImageCallback(multipixels[i], b, multipixels[i].image.tag);
  }

  function doDiffs() {
    var attachment_point = document.getElementById("diffs");
    var idgen = 0;

    for(var id in multipixels) {
      if(multipixels[id].canvas == null) {
        continue;
      }
      idgen += 1;

      var p = document.createElement("p");
      var p2 = document.createElement("p");
      var ua = document.createElement("a");

      ua.href = "/exp/#{@exp.name}/results/" + multipixels[id]["id"];
      ua.innerHTML = multipixels[id]["title"] + ": " + multipixels[id]["useragent"];

      p2.appendChild(ua);
      p.appendChild(p2);

      if(canvasDiffer(prime.canvas, multipixels[id].canvas)) {
        var differ = document.createElement("div");
        differ.innerHTML = "Differ!";
        p.appendChild(differ);
      }

      var diffs = diff(prime.canvas, multipixels[id].canvas);
      p.appendChild(diffs);
      p.appendChild(diffmap(prime.canvas, multipixels[id].canvas));

      attachment_point.appendChild(p);
    }
  }


%nav
  %a{:href=>"/", :rel => "up"} Experiments
  &gt;
  %a{:href=>"#{link_to(:exp, @exp)}"} #{@exp.name}
  &gt;
  %a{:href=>"#{link_to(:results, @exp)}"} Results
  &gt;
  %b
    #{@result.id}

#experiment
  %h1
    Experiment
    %a{:href=>"#{link_to(:exp, @exp)}"} #{@exp.name}
  %h2 Result #{@result.id}
  - if not @result.title.nil?
    %h3 Title: #{@result.title}

  #diffs

  #hide{:style=>"display:none;"}
    = render :haml, :canvas, :layout => false

